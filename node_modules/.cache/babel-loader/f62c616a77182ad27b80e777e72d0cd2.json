{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/pre-dao/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Navbar, Button, Form } from 'react-bootstrap';\nimport { ethers } from \"ethers\";\nimport React, { useState, useEffect } from 'react';\nimport { useConnect } from 'wagmi';\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { isMobile } from \"react-device-detect\";\nimport sct_abi from './contracts/sct_abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst url = \"https://polygon-mumbai.g.alchemy.com/v2/LDruTtddIy66V4Lr7gEXbQgjBTdBCHzL\";\nconst defaultUserWalletState = {\n  address: '0x0000000000000000000000000000000000000000',\n  network: null,\n  connected: false\n};\nconst mumbaiChainParameter = {\n  chainId: \"0x13881\",\n  chainName: \"Mumbai\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18\n  },\n  rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n};\n\nfunction App() {\n  _s();\n\n  // Connect MetaMask Mumbai Start End //\n  let [isLoading, setIsLoading] = React.useState(false);\n  let [userWallet, setUserWallet] = React.useState(defaultUserWalletState);\n  let [buttonText, setButtonText] = React.useState('Connect Wallet');\n  const [{\n    data: connectData,\n    loading: connectDataLoading,\n    error: connectDataError\n  }, connect] = useConnect();\n  let wagmiObj;\n  connectData.connectors.map(obj => {\n    wagmiObj = obj;\n  });\n  React.useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', accounts => {\n        console.log(`Wallet changed: ${accounts[0]}`);\n\n        if (accounts[0] === undefined) {\n          setUserWallet(defaultUserWalletState);\n        } else if (accounts[0] !== userWallet.address) {\n          setUserWallet(prevUserWallet => ({ ...prevUserWallet,\n            address: accounts[0]\n          }));\n        }\n      });\n      window.ethereum.on('chainChanged', chainId => {\n        console.log(`Network changed: ${chainId}`);\n\n        if (chainId !== '0x13881') {\n          window.location.reload();\n        }\n      });\n    } else {\n      toast('Please install Metamask to use Solid World Dapp.');\n    }\n  }, []);\n\n  async function handleWalletConnection() {\n    setIsLoading(true);\n\n    if (!userWallet.connected) {\n      try {\n        setButtonText(\"Wallet Connected\");\n        console.log('Connecting MetaMask...');\n        const connectMetamask = await connect(wagmiObj);\n\n        if (connectMetamask.data) {\n          if (window.ethereum.chainId !== '0x13881') {\n            await checkNetwork();\n          }\n\n          setUserWallet(prevUserWallet => ({ ...prevUserWallet,\n            network: window.ethereum.chainId,\n            address: connectMetamask.data.account,\n            connected: true\n          }));\n          toast.success('Connected Account to Solid World Dapp.', {\n            duration: 3000\n          });\n          console.log('Connected Account to Mumbai Network: ', connectMetamask.data.account);\n        }\n\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setUserWallet(defaultUserWalletState);\n        console.log('Connecting MetaMask Error: ', error, connectDataError);\n        setIsLoading(false);\n        window.location.reload();\n        return;\n      }\n    } else {\n      setUserWallet(defaultUserWalletState);\n      toast.error('Disconnected Account.', {\n        duration: 3000\n      });\n      console.log('User wallet disconnect');\n      setIsLoading(false);\n      return;\n    }\n  }\n\n  async function checkNetwork() {\n    console.log('Connecting MetaMask to Mumbai Network...');\n    toast.loading('Please connect your Metamask to Mumbai Polygon Testnet to use Solid World Dapp');\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x13881'\n        }]\n      });\n      return;\n    } catch (switchError) {\n      if (isMobile || switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [mumbaiChainParameter]\n          });\n          return;\n        } catch (addError) {\n          console.log('Connecting Mumbai Network: ', addError.message);\n          throw addError;\n        }\n      }\n\n      console.log('Connecting Mumbai Netowrk: ', switchError.message);\n      throw switchError;\n    }\n  } // Connect MetaMask Mumbai Netowrk End//\n  // Contract Connection //\n\n\n  const [contract, setContract] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [name, setName] = useState(null);\n  const [symbol, setSymbol] = useState(null);\n  const [decimals, setDecimals] = useState(null);\n  const [totalSuply, setTotalSuply] = useState(null);\n  const contractAddress = '0x2C963ebaFCF40016AE7Ef5B3236a480de4Dc491B';\n\n  const updateContract = () => {\n    let tempProvider = new ethers.providers.JsonRpcProvider(url);\n    let tempSigner = tempProvider.getSigner('0xb7679dA37b4BDBDf1b7455b87d57b4A259466221');\n    setSigner(tempSigner);\n    let tempContract = new ethers.Contract(contractAddress, sct_abi, tempSigner);\n    setContract(tempContract);\n  };\n\n  const connectWallet = () => {\n    handleWalletConnection();\n    updateContract();\n  };\n\n  const doSomething = something => {\n    handleWalletConnection();\n    updateContract();\n  };\n\n  somePromisse.then();\n\n  async function updateInfos() {\n    let tempName = await contract.name();\n    setName(tempName);\n    let tempSymbol = await contract.symbol();\n    setSymbol(tempSymbol);\n    let tempDecimals = await contract.decimals();\n    setDecimals(tempDecimals);\n    let tempTotalSuply = await contract.totalSupply();\n    let totalSupplyParsed = ethers.utils.formatEther(tempTotalSuply);\n    setTotalSuply(totalSupplyParsed);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"light\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          children: \"SCT TESTE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Navbar.Text, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-dark\",\n            onClick: connectWallet,\n            children: buttonText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Token Name: \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Token Symbol: \", symbol, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Decimals: \", decimals, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Total Suply: \", totalSuply]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6eVvl4AqSmwB2y7JKxEsd0b7Lxo=\", false, function () {\n  return [useConnect];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbook/Documents/pre-dao/src/App.js"],"names":["Container","Navbar","Button","Form","ethers","React","useState","useEffect","useConnect","toast","Toaster","isMobile","sct_abi","url","defaultUserWalletState","address","network","connected","mumbaiChainParameter","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","App","isLoading","setIsLoading","userWallet","setUserWallet","buttonText","setButtonText","data","connectData","loading","connectDataLoading","error","connectDataError","connect","wagmiObj","connectors","map","obj","window","ethereum","on","accounts","console","log","undefined","prevUserWallet","location","reload","handleWalletConnection","connectMetamask","checkNetwork","account","success","duration","request","method","params","switchError","code","addError","message","contract","setContract","signer","setSigner","setName","setSymbol","setDecimals","totalSuply","setTotalSuply","contractAddress","updateContract","tempProvider","providers","JsonRpcProvider","tempSigner","getSigner","tempContract","Contract","connectWallet","doSomething","something","somePromisse","then","updateInfos","tempName","tempSymbol","tempDecimals","tempTotalSuply","totalSupply","totalSupplyParsed","utils","formatEther"],"mappings":"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","sourcesContent":["import {Container, Navbar, Button, Form} from 'react-bootstrap'\nimport { ethers } from \"ethers\";\nimport React, {useState, useEffect} from 'react'\nimport { useConnect } from 'wagmi'\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { isMobile } from \"react-device-detect\";\nimport sct_abi from './contracts/sct_abi.json'\n\nconst url = \"https://polygon-mumbai.g.alchemy.com/v2/LDruTtddIy66V4Lr7gEXbQgjBTdBCHzL\";\n\nconst defaultUserWalletState = {\n  address: '0x0000000000000000000000000000000000000000',\n  network: null,\n  connected: false\n}\n\nconst mumbaiChainParameter = {\n  chainId: \"0x13881\",\n  chainName: \"Mumbai\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\n}\nfunction App() {\n\n  // Connect MetaMask Mumbai Start End //\n\n  let [isLoading, setIsLoading] = React.useState(false);\n\n  let [userWallet, setUserWallet] = React.useState(defaultUserWalletState);\n\n  let [buttonText, setButtonText] = React.useState('Connect Wallet')\n\n  const [{\n    data: connectData,\n    loading: connectDataLoading,\n    error: connectDataError\n  }, connect] = useConnect();\n\n  let wagmiObj;\n  connectData.connectors.map(obj => { wagmiObj = obj });\n\n  React.useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        console.log(`Wallet changed: ${accounts[0]}`);\n        if (accounts[0] === undefined) {\n          setUserWallet(defaultUserWalletState);\n        }\n        else if (accounts[0] !== userWallet.address) {\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            address: accounts[0]\n          }));\n        }\n      })\n      window.ethereum.on('chainChanged', (chainId) => {\n        console.log(`Network changed: ${chainId}`);\n        if (chainId !== '0x13881') {\n          window.location.reload();\n        }\n      })\n    } else {\n      toast('Please install Metamask to use Solid World Dapp.');\n    }\n  }, []);\n\n  async function handleWalletConnection() {\n    setIsLoading(true);\n    if (!userWallet.connected) {\n      try {\n        setButtonText(\"Wallet Connected\");\n        console.log('Connecting MetaMask...');\n        const connectMetamask = await connect(wagmiObj);\n        if (connectMetamask.data) {\n          if (window.ethereum.chainId !== '0x13881') { \n            await checkNetwork();\n          }\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            network: window.ethereum.chainId,\n            address: connectMetamask.data.account,\n            connected: true\n          }));\n          toast.success('Connected Account to Solid World Dapp.', {duration: 3000});\n          console.log('Connected Account to Mumbai Network: ', connectMetamask.data.account);\n        }\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setUserWallet(defaultUserWalletState);\n        console.log('Connecting MetaMask Error: ', error, connectDataError);\n        setIsLoading(false);\n        window.location.reload();\n        return;\n      }\n    } else {\n      setUserWallet(defaultUserWalletState);\n      toast.error('Disconnected Account.', { duration: 3000 });\n      console.log('User wallet disconnect');\n      setIsLoading(false);\n      return;\n    }\n  }\n\n  async function checkNetwork() {\n    console.log('Connecting MetaMask to Mumbai Network...');\n    toast.loading('Please connect your Metamask to Mumbai Polygon Testnet to use Solid World Dapp');\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x13881' }],\n      });\n      return;\n    } catch (switchError) {\n      if (isMobile || switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              mumbaiChainParameter\n            ],\n          });\n          return;\n        } catch (addError) {\n          console.log('Connecting Mumbai Network: ', addError.message);\n          throw addError;\n        }\n      }\n      console.log('Connecting Mumbai Netowrk: ', switchError.message);\n      throw switchError;\n    }\n  }\n\n// Connect MetaMask Mumbai Netowrk End//\n\n// Contract Connection //\nconst [contract, setContract] = useState(null);\nconst [signer, setSigner] = useState(null);\nconst [name, setName] = useState(null);\nconst [symbol, setSymbol] = useState(null);\nconst [decimals, setDecimals] = useState(null);\nconst [totalSuply, setTotalSuply] = useState(null);\n\nconst contractAddress = '0x2C963ebaFCF40016AE7Ef5B3236a480de4Dc491B'\n\nconst updateContract = () => {\n  let tempProvider = new ethers.providers.JsonRpcProvider(url);\n  let tempSigner = tempProvider.getSigner('0xb7679dA37b4BDBDf1b7455b87d57b4A259466221')\n  setSigner(tempSigner)\n  let tempContract = new ethers.Contract(contractAddress, sct_abi, tempSigner)\n  setContract(tempContract);\n\n} \nconst connectWallet = () => {\n  handleWalletConnection()\n  updateContract(); \n}\n\nconst doSomething = (something) => {\n  handleWalletConnection();\n  updateContract();\n}\nsomePromisse.then()\n\n\nasync function updateInfos(){\n  let tempName = await contract.name()\n  setName(tempName)\n  let tempSymbol = await contract.symbol()\n  setSymbol(tempSymbol)\n  let tempDecimals = await contract.decimals()\n  setDecimals(tempDecimals)\n  let tempTotalSuply = await contract.totalSupply()\n  let totalSupplyParsed = ethers.utils.formatEther(tempTotalSuply)\n  setTotalSuply(totalSupplyParsed)  \n}\n\n\n\nreturn (\n    <div className=\"App\">\n      <Navbar bg=\"light\">\n        <Container>\n          <Navbar.Brand>SCT TESTE</Navbar.Brand>\n          <Navbar.Text><Button variant=\"outline-dark\" onClick={connectWallet}>{buttonText}</Button></Navbar.Text>\n        </Container>\n      </Navbar>\n      <div className=\"pt-5\">\n        <h4 className=\"py-5\">Token Name: {name}</h4>\n        <h4 className=\"py-5\">Token Symbol: {symbol} </h4>\n        <h4 className=\"py-5\">Decimals: {decimals} </h4>\n        <h4 className=\"py-5\">Total Suply: {totalSuply}</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}