{"ast":null,"code":"import EventEmitter from 'eventemitter3';\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n\n  privateMap.set(obj, value);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n\n  _classApplyDescriptorSet(receiver, descriptor, value);\n\n  return value;\n}\n/**\n * Data from Chainlist\n * @see https://chainlist.org\n */\n\n\nconst chain = {\n  mainnet: {\n    id: 1,\n    name: 'Mainnet',\n    nativeCurrency: {\n      name: 'Ether',\n      symbol: 'ETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://mainnet.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://etherscan.io'\n    }]\n  },\n  ropsten: {\n    id: 3,\n    name: 'Ropsten',\n    nativeCurrency: {\n      name: 'Ropsten Ether',\n      symbol: 'ropETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://ropsten.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://ropsten.etherscan.io'\n    }],\n    testnet: true\n  },\n  rinkeby: {\n    id: 4,\n    name: 'Rinkeby',\n    nativeCurrency: {\n      name: 'Rinkeby Ether',\n      symbol: 'rETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://rinkeby.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://rinkeby.etherscan.io'\n    }],\n    testnet: true\n  },\n  goerli: {\n    id: 5,\n    name: 'Goerli',\n    nativeCurrency: {\n      name: 'Goerli Ether',\n      symbol: 'gETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://goerli.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://goerli.etherscan.io'\n    }],\n    testnet: true\n  },\n  kovan: {\n    id: 42,\n    name: 'Kovan',\n    nativeCurrency: {\n      name: 'Kovan Ether',\n      symbol: 'kETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://kovan.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://kovan.etherscan.io'\n    }],\n    testnet: true\n  },\n  optimism: {\n    id: 10,\n    name: 'Optimism',\n    nativeCurrency: {\n      name: 'Ether',\n      symbol: 'ETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://mainnet.optimism.io'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://optimistic.etherscan.io'\n    }]\n  },\n  optimismKovan: {\n    id: 69,\n    name: 'Optimism Kovan',\n    nativeCurrency: {\n      name: 'Kovan Ether',\n      symbol: 'KOR',\n      decimals: 18\n    },\n    rpcUrls: ['https://kovan.optimism.io'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://kovan-optimistic.etherscan.io'\n    }],\n    testnet: true\n  },\n  polygonMainnet: {\n    id: 137,\n    name: 'Polygon Mainnet',\n    nativeCurrency: {\n      name: 'MATIC',\n      symbol: 'MATIC',\n      decimals: 18\n    },\n    rpcUrls: ['https://polygon-rpc.com', 'https://rpc-mainnet.matic.network', 'https://matic-mainnet.chainstacklabs.com', 'https://rpc-mainnet.maticvigil.com', 'https://rpc-mainnet.matic.quiknode.pro', 'https://matic-mainnet-full-rpc.bwarelabs.com'],\n    blockExplorers: [{\n      name: 'Polygonscan',\n      url: 'https://polygonscan.com'\n    }]\n  },\n  polygonTestnetMumbai: {\n    id: 80001,\n    name: 'Mumbai',\n    nativeCurrency: {\n      name: 'MATIC',\n      symbol: 'MATIC',\n      decimals: 18\n    },\n    rpcUrls: ['https://matic-mumbai.chainstacklabs.com', 'https://rpc-mumbai.maticvigil.com', 'https://matic-testnet-archive-rpc.bwarelabs.com'],\n    blockExplorers: [{\n      name: 'Polygonscan',\n      url: 'https://mumbai.polygonscan.com'\n    }],\n    testnet: true\n  },\n  arbitrumOne: {\n    id: 42161,\n    name: 'Arbitrum One',\n    nativeCurrency: {\n      name: 'Ether',\n      symbol: 'AETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://arb1.arbitrum.io/rpc'],\n    blockExplorers: [{\n      name: 'Arbiscan',\n      url: 'https://arbiscan.io'\n    }, {\n      name: 'Arbitrum Explorer',\n      url: 'https://explorer.arbitrum.io'\n    }]\n  },\n  arbitrumRinkeby: {\n    id: 421611,\n    name: 'Arbitrum Rinkeby',\n    nativeCurrency: {\n      name: 'Arbitrum Rinkeby Ether',\n      symbol: 'ARETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://rinkeby.arbitrum.io/rpc'],\n    blockExplorers: [{\n      name: 'Arbitrum Explorer',\n      url: 'https://rinkeby-explorer.arbitrum.io'\n    }],\n    testnet: true\n  },\n  avalanche: {\n    id: 43114,\n    name: 'Avalanche Mainnet',\n    nativeCurrency: {\n      name: 'Avalanche',\n      symbol: 'AVAX',\n      decimals: 18\n    },\n    rpcUrls: ['https://api.avax.network/ext/bc/C/rpc'],\n    blockExplorers: [{\n      name: 'SnowTrace',\n      url: 'https://snowtrace.io'\n    }],\n    testnet: false\n  },\n  avalancheFuji: {\n    id: 43113,\n    name: 'Avalanche Fuji Testnet',\n    nativeCurrency: {\n      name: 'Avalanche',\n      symbol: 'AVAX',\n      decimals: 18\n    },\n    rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    blockExplorers: [{\n      name: 'SnowTrace',\n      url: 'https://testnet.snowtrace.io'\n    }],\n    testnet: true\n  },\n  localhost: {\n    id: 1337,\n    name: 'Localhost',\n    rpcUrls: ['https://127.0.0.1:8545']\n  },\n  hardhat: {\n    id: 31337,\n    name: 'Hardhat',\n    rpcUrls: ['http://127.0.0.1:8545']\n  }\n};\nconst allChains = Object.values(chain);\nconst defaultChains = [chain.mainnet, chain.ropsten, chain.rinkeby, chain.goerli, chain.kovan];\nconst defaultL2Chains = [chain.optimism, chain.optimismKovan, chain.polygonMainnet, chain.polygonTestnetMumbai, chain.arbitrumOne, chain.arbitrumRinkeby];\nconst developmentChains = [chain.localhost, chain.hardhat];\n\nconst normalizeChainId = chainId => {\n  if (typeof chainId === 'string') return Number.parseInt(chainId, chainId.trim().substring(0, 2) === '0x' ? 16 : 10);\n  return chainId;\n};\n\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'AddChainError');\n\n    _defineProperty(this, \"message\", 'Error adding chain');\n  }\n\n}\n\nclass ChainNotConfiguredError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'ChainNotConfigured');\n\n    _defineProperty(this, \"message\", 'Chain not configured');\n  }\n\n}\n\nclass ConnectorAlreadyConnectedError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'ConnectorAlreadyConnectedError');\n\n    _defineProperty(this, \"message\", 'Connector already connected');\n  }\n\n}\n\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'ConnectorNotFoundError');\n\n    _defineProperty(this, \"message\", 'Connector not found');\n  }\n\n}\n\nclass SwitchChainError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'SwitchChainError');\n\n    _defineProperty(this, \"message\", 'Error switching chain');\n  }\n\n}\n\nclass UserRejectedRequestError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'UserRejectedRequestError');\n\n    _defineProperty(this, \"message\", 'User rejected request');\n  }\n\n}\n\nclass Connector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"chains\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"ready\", void 0);\n\n    this.chains = chains;\n    this.options = options;\n  }\n\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.id === chainId);\n  }\n\n}\n\nexport { AddChainError as A, Connector as C, SwitchChainError as S, UserRejectedRequestError as U, _defineProperty as _, _classPrivateFieldInitSpec as a, ConnectorNotFoundError as b, _classPrivateFieldSet as c, _classPrivateFieldGet as d, allChains as e, ChainNotConfiguredError as f, defaultChains as g, defaultL2Chains as h, chain as i, developmentChains as j, ConnectorAlreadyConnectedError as k, _checkPrivateRedeclaration as l, normalizeChainId as n };","map":{"version":3,"sources":["/Users/macbook/Documents/nft-remix/node_modules/wagmi-core/dist/base-6bdddfcd.esm.js"],"names":["EventEmitter","_checkPrivateRedeclaration","obj","privateCollection","has","TypeError","_classPrivateFieldInitSpec","privateMap","value","set","_defineProperty","key","Object","defineProperty","enumerable","configurable","writable","_classApplyDescriptorGet","receiver","descriptor","get","call","_classExtractFieldDescriptor","action","_classPrivateFieldGet","_classApplyDescriptorSet","_classPrivateFieldSet","chain","mainnet","id","name","nativeCurrency","symbol","decimals","rpcUrls","blockExplorers","url","ropsten","testnet","rinkeby","goerli","kovan","optimism","optimismKovan","polygonMainnet","polygonTestnetMumbai","arbitrumOne","arbitrumRinkeby","avalanche","avalancheFuji","localhost","hardhat","allChains","values","defaultChains","defaultL2Chains","developmentChains","normalizeChainId","chainId","Number","parseInt","trim","substring","AddChainError","Error","constructor","arguments","ChainNotConfiguredError","ConnectorAlreadyConnectedError","ConnectorNotFoundError","SwitchChainError","UserRejectedRequestError","Connector","_ref","chains","options","isChainUnsupported","some","x","A","C","S","U","_","a","b","c","d","e","f","g","h","i","j","k","l","n"],"mappings":"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","sourcesContent":["import EventEmitter from 'eventemitter3';\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n\n/**\n * Data from Chainlist\n * @see https://chainlist.org\n */\nconst chain = {\n  mainnet: {\n    id: 1,\n    name: 'Mainnet',\n    nativeCurrency: {\n      name: 'Ether',\n      symbol: 'ETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://mainnet.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://etherscan.io'\n    }]\n  },\n  ropsten: {\n    id: 3,\n    name: 'Ropsten',\n    nativeCurrency: {\n      name: 'Ropsten Ether',\n      symbol: 'ropETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://ropsten.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://ropsten.etherscan.io'\n    }],\n    testnet: true\n  },\n  rinkeby: {\n    id: 4,\n    name: 'Rinkeby',\n    nativeCurrency: {\n      name: 'Rinkeby Ether',\n      symbol: 'rETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://rinkeby.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://rinkeby.etherscan.io'\n    }],\n    testnet: true\n  },\n  goerli: {\n    id: 5,\n    name: 'Goerli',\n    nativeCurrency: {\n      name: 'Goerli Ether',\n      symbol: 'gETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://goerli.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://goerli.etherscan.io'\n    }],\n    testnet: true\n  },\n  kovan: {\n    id: 42,\n    name: 'Kovan',\n    nativeCurrency: {\n      name: 'Kovan Ether',\n      symbol: 'kETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://kovan.infura.io/v3'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://kovan.etherscan.io'\n    }],\n    testnet: true\n  },\n  optimism: {\n    id: 10,\n    name: 'Optimism',\n    nativeCurrency: {\n      name: 'Ether',\n      symbol: 'ETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://mainnet.optimism.io'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://optimistic.etherscan.io'\n    }]\n  },\n  optimismKovan: {\n    id: 69,\n    name: 'Optimism Kovan',\n    nativeCurrency: {\n      name: 'Kovan Ether',\n      symbol: 'KOR',\n      decimals: 18\n    },\n    rpcUrls: ['https://kovan.optimism.io'],\n    blockExplorers: [{\n      name: 'Etherscan',\n      url: 'https://kovan-optimistic.etherscan.io'\n    }],\n    testnet: true\n  },\n  polygonMainnet: {\n    id: 137,\n    name: 'Polygon Mainnet',\n    nativeCurrency: {\n      name: 'MATIC',\n      symbol: 'MATIC',\n      decimals: 18\n    },\n    rpcUrls: ['https://polygon-rpc.com', 'https://rpc-mainnet.matic.network', 'https://matic-mainnet.chainstacklabs.com', 'https://rpc-mainnet.maticvigil.com', 'https://rpc-mainnet.matic.quiknode.pro', 'https://matic-mainnet-full-rpc.bwarelabs.com'],\n    blockExplorers: [{\n      name: 'Polygonscan',\n      url: 'https://polygonscan.com'\n    }]\n  },\n  polygonTestnetMumbai: {\n    id: 80001,\n    name: 'Mumbai',\n    nativeCurrency: {\n      name: 'MATIC',\n      symbol: 'MATIC',\n      decimals: 18\n    },\n    rpcUrls: ['https://matic-mumbai.chainstacklabs.com', 'https://rpc-mumbai.maticvigil.com', 'https://matic-testnet-archive-rpc.bwarelabs.com'],\n    blockExplorers: [{\n      name: 'Polygonscan',\n      url: 'https://mumbai.polygonscan.com'\n    }],\n    testnet: true\n  },\n  arbitrumOne: {\n    id: 42161,\n    name: 'Arbitrum One',\n    nativeCurrency: {\n      name: 'Ether',\n      symbol: 'AETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://arb1.arbitrum.io/rpc'],\n    blockExplorers: [{\n      name: 'Arbiscan',\n      url: 'https://arbiscan.io'\n    }, {\n      name: 'Arbitrum Explorer',\n      url: 'https://explorer.arbitrum.io'\n    }]\n  },\n  arbitrumRinkeby: {\n    id: 421611,\n    name: 'Arbitrum Rinkeby',\n    nativeCurrency: {\n      name: 'Arbitrum Rinkeby Ether',\n      symbol: 'ARETH',\n      decimals: 18\n    },\n    rpcUrls: ['https://rinkeby.arbitrum.io/rpc'],\n    blockExplorers: [{\n      name: 'Arbitrum Explorer',\n      url: 'https://rinkeby-explorer.arbitrum.io'\n    }],\n    testnet: true\n  },\n  avalanche: {\n    id: 43114,\n    name: 'Avalanche Mainnet',\n    nativeCurrency: {\n      name: 'Avalanche',\n      symbol: 'AVAX',\n      decimals: 18\n    },\n    rpcUrls: ['https://api.avax.network/ext/bc/C/rpc'],\n    blockExplorers: [{\n      name: 'SnowTrace',\n      url: 'https://snowtrace.io'\n    }],\n    testnet: false\n  },\n  avalancheFuji: {\n    id: 43113,\n    name: 'Avalanche Fuji Testnet',\n    nativeCurrency: {\n      name: 'Avalanche',\n      symbol: 'AVAX',\n      decimals: 18\n    },\n    rpcUrls: ['https://api.avax-test.network/ext/bc/C/rpc'],\n    blockExplorers: [{\n      name: 'SnowTrace',\n      url: 'https://testnet.snowtrace.io'\n    }],\n    testnet: true\n  },\n  localhost: {\n    id: 1337,\n    name: 'Localhost',\n    rpcUrls: ['https://127.0.0.1:8545']\n  },\n  hardhat: {\n    id: 31337,\n    name: 'Hardhat',\n    rpcUrls: ['http://127.0.0.1:8545']\n  }\n};\nconst allChains = Object.values(chain);\nconst defaultChains = [chain.mainnet, chain.ropsten, chain.rinkeby, chain.goerli, chain.kovan];\nconst defaultL2Chains = [chain.optimism, chain.optimismKovan, chain.polygonMainnet, chain.polygonTestnetMumbai, chain.arbitrumOne, chain.arbitrumRinkeby];\nconst developmentChains = [chain.localhost, chain.hardhat];\n\nconst normalizeChainId = chainId => {\n  if (typeof chainId === 'string') return Number.parseInt(chainId, chainId.trim().substring(0, 2) === '0x' ? 16 : 10);\n  return chainId;\n};\n\nclass AddChainError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'AddChainError');\n\n    _defineProperty(this, \"message\", 'Error adding chain');\n  }\n\n}\nclass ChainNotConfiguredError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'ChainNotConfigured');\n\n    _defineProperty(this, \"message\", 'Chain not configured');\n  }\n\n}\nclass ConnectorAlreadyConnectedError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'ConnectorAlreadyConnectedError');\n\n    _defineProperty(this, \"message\", 'Connector already connected');\n  }\n\n}\nclass ConnectorNotFoundError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'ConnectorNotFoundError');\n\n    _defineProperty(this, \"message\", 'Connector not found');\n  }\n\n}\nclass SwitchChainError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'SwitchChainError');\n\n    _defineProperty(this, \"message\", 'Error switching chain');\n  }\n\n}\nclass UserRejectedRequestError extends Error {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"name\", 'UserRejectedRequestError');\n\n    _defineProperty(this, \"message\", 'User rejected request');\n  }\n\n}\n\nclass Connector extends EventEmitter {\n  /** Unique connector id */\n\n  /** Connector name */\n\n  /** Chains connector supports */\n\n  /** Options to use with connector */\n\n  /** Whether connector is usable */\n  constructor(_ref) {\n    let {\n      chains = defaultChains,\n      options\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"chains\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"ready\", void 0);\n\n    this.chains = chains;\n    this.options = options;\n  }\n\n  isChainUnsupported(chainId) {\n    return !this.chains.some(x => x.id === chainId);\n  }\n\n}\n\nexport { AddChainError as A, Connector as C, SwitchChainError as S, UserRejectedRequestError as U, _defineProperty as _, _classPrivateFieldInitSpec as a, ConnectorNotFoundError as b, _classPrivateFieldSet as c, _classPrivateFieldGet as d, allChains as e, ChainNotConfiguredError as f, defaultChains as g, defaultL2Chains as h, chain as i, developmentChains as j, ConnectorAlreadyConnectedError as k, _checkPrivateRedeclaration as l, normalizeChainId as n };\n"]},"metadata":{},"sourceType":"module"}