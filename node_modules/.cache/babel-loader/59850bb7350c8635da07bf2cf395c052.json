{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/pre-dao/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Navbar, Button, Form } from 'react-bootstrap';\nimport { ethers } from \"ethers\";\nimport React, { useState, useEffect } from 'react';\nimport token_abi from './contracts/sct_abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new ethers.providers.AlchemyProvider('maticmum', 'eytwgLayNf_PqhNiSwaOPzkb-fS9hss5');\n\nfunction App() {\n  _s();\n\n  // Connect to MetaMask Start //\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log('Need to install MetaMask');\n      setErrorMessage('Please install MetaMask browser extension to interact');\n    }\n  };\n\n  const accountChangedHandler = newAccount => {\n    setDefaultAccount(newAccount);\n    updateContract();\n  }; // Connect to MetaMask End //\n  // Sct Contract Start //\n\n\n  const sctAddress = \"0x54005ab145e74d6354fe81390523e67dc40da64f\";\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n\n  const updateContract = () => {\n    let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(tempProvider);\n    let tempSigner = provider.getSigner();\n    setSigner(tempSigner);\n    let tempContract = new ethers.Contract(sctAddress, token_abi, signer);\n    setContract(tempContract);\n  }; // Sct Contract End //\n  // Sct Infos Start //\n\n\n  const [name, setName] = useState(null);\n  const [symbol, setSymbol] = useState(null);\n  const [decimals, setDecimals] = useState(null);\n  const [totalSupply, setTotalSupply] = useState(null);\n\n  const updateName = async () => {\n    let tempName = await contract.name();\n    setName(tempName);\n  };\n\n  const updateSymbol = async () => {\n    let temSymbol = await contract.symbol();\n    setSymbol(temSymbol);\n  };\n\n  const updateDecimals = async () => {\n    let tempDecimals = await contract.decimals();\n    setDecimals(tempDecimals);\n  };\n\n  const updateTotalSupply = async () => {\n    let tempTotalSupply = await contract.totalSupply();\n    setTotalSupply(tempTotalSupply);\n  }; // Sct Infos End //\n  // Sct Load Infos Start //\n\n\n  useEffect(() => {\n    if (contract != null) {\n      updateName();\n      updateSymbol();\n      updateDecimals();\n      updateTotalSupply();\n    }\n  }, [contract]); // Sct Load Infos End //\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"light\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          children: \"SCT TESTE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Navbar.Text, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-dark\",\n            onClick: connectWalletHandler,\n            children: connButtonText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Token Name: \", name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Token Symbol: \", symbol, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Decimals: \", decimals, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: [\"Total Suply: \", totalSupply, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Z4LKSYjHCcnHAYC8vlu0qAyzvC8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbook/Documents/pre-dao/src/App.js"],"names":["Container","Navbar","Button","Form","ethers","React","useState","useEffect","token_abi","provider","providers","AlchemyProvider","App","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","connButtonText","setConnButtonText","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","error","message","console","log","newAccount","updateContract","sctAddress","setProvider","signer","setSigner","contract","setContract","tempProvider","Web3Provider","tempSigner","getSigner","tempContract","Contract","name","setName","symbol","setSymbol","decimals","setDecimals","totalSupply","setTotalSupply","updateName","tempName","updateSymbol","temSymbol","updateDecimals","tempDecimals","updateTotalSupply","tempTotalSupply"],"mappings":"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","sourcesContent":["import {Container, Navbar, Button, Form} from 'react-bootstrap'\nimport { ethers } from \"ethers\";\nimport React, {useState, useEffect} from 'react'\n\nimport token_abi from './contracts/sct_abi.json'\n\nconst provider = new ethers.providers.AlchemyProvider('maticmum', 'eytwgLayNf_PqhNiSwaOPzkb-fS9hss5');\n\nfunction App() {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // Connect to MetaMask Start //\n  \n  const [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask) {\n\n            window.ethereum.request({ method: 'eth_requestAccounts'})\n            .then(result => {\n                accountChangedHandler(result[0]);\n                setConnButtonText('Wallet Connected');\n            })\n            .catch(error => {\n                setErrorMessage(error.message);\n            \n            });\n\n        } else {\n            console.log('Need to install MetaMask');\n            setErrorMessage('Please install MetaMask browser extension to interact');\n        }\n    }\n    const accountChangedHandler = (newAccount) => {\n      setDefaultAccount(newAccount);\n      updateContract()\n  }\n\n  // Connect to MetaMask End //\n\n  // Sct Contract Start //\n\n  const sctAddress = \"0x54005ab145e74d6354fe81390523e67dc40da64f\"\n  const [provider, setProvider] = useState(null)\n  const [signer, setSigner] = useState(null)\n  const [contract, setContract] = useState(null)\n\n  const updateContract = () => {\n    \n    let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n    setProvider(tempProvider);\n\n    let tempSigner = provider.getSigner();\n    setSigner(tempSigner);\n\n    let tempContract = new ethers.Contract(sctAddress, token_abi, signer);\n    setContract(tempContract);\n  }\n\n  // Sct Contract End //\n\n  // Sct Infos Start //\n\n  const [name, setName] = useState(null)\n  const [symbol, setSymbol] = useState(null)\n  const [decimals, setDecimals] = useState(null)\n  const [totalSupply, setTotalSupply] = useState(null)\n\n  const updateName = async () => {\n    let tempName = await contract.name()\n    setName(tempName)\n  }\n\n  const updateSymbol = async () => {\n    let temSymbol = await contract.symbol()\n    setSymbol(temSymbol)\n  }\n\n  const updateDecimals = async () => {\n    let tempDecimals = await contract.decimals()\n    setDecimals(tempDecimals)\n  }\n\n  const updateTotalSupply = async () => {\n    let tempTotalSupply = await contract.totalSupply()\n    setTotalSupply(tempTotalSupply)\n  }\n\n  // Sct Infos End //\n\n  // Sct Load Infos Start //\n\n  useEffect(() => {\n    if(contract != null) {\n      updateName();\n      updateSymbol();\n      updateDecimals();\n      updateTotalSupply();  \n    }\n  }, [contract])\n\n  // Sct Load Infos End //\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\">\n        <Container>\n          <Navbar.Brand>SCT TESTE</Navbar.Brand>\n          <Navbar.Text><Button variant=\"outline-dark\" onClick={connectWalletHandler}>{connButtonText}</Button></Navbar.Text>\n        </Container>\n      </Navbar>\n      <div className=\"pt-5\">\n        <h4 className=\"py-5\">Token Name: {name} </h4>\n        <h4 className=\"py-5\">Token Symbol: {symbol} </h4>\n        <h4 className=\"py-5\">Decimals: {decimals} </h4>\n        <h4 className=\"py-5\">Total Suply: {totalSupply} </h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}