{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/pre-dao/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Navbar, Button, Form } from 'react-bootstrap';\nimport { ethers } from \"ethers\";\nimport React, { useState, useEffect } from 'react';\nimport token_abi from './contracts/sct_abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new ethers.providers.AlchemyProvider('maticmum', 'eytwgLayNf_PqhNiSwaOPzkb-fS9hss5');\nconst defaultUserWalletState = {\n  address: '0x0000000000000000000000000000000000000000',\n  network: null,\n  connected: false\n};\nconst mumbaiChainParameter = {\n  chainId: \"0x13881\",\n  chainName: \"Mumbai\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18\n  },\n  rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n};\n\nfunction App() {\n  _s();\n\n  let [isLoading, setIsLoading] = React.useState(false);\n  let [userWallet, setUserWallet] = React.useState(defaultUserWalletState);\n  const [{\n    data: connectData,\n    loading: connectDataLoading,\n    error: connectDataError\n  }, connect] = useConnect();\n  let wagmiObj;\n  connectData.connectors.map(obj => {\n    wagmiObj = obj;\n  });\n  React.useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', accounts => {\n        console.log(`Wallet changed: ${accounts[0]}`);\n\n        if (accounts[0] === undefined) {\n          setUserWallet(defaultUserWalletState);\n        } else if (accounts[0] !== userWallet.address) {\n          setUserWallet(prevUserWallet => ({ ...prevUserWallet,\n            address: accounts[0]\n          }));\n        }\n      });\n      window.ethereum.on('chainChanged', chainId => {\n        console.log(`Network changed: ${chainId}`);\n\n        if (chainId !== '0x13881') {\n          window.location.reload();\n        }\n      });\n    } else {\n      toast('Please install Metamask to use Solid World Dapp.');\n    }\n  }, []);\n\n  async function handleWalletConnection() {\n    setIsLoading(true);\n\n    if (!userWallet.connected) {\n      try {\n        console.log('Connecting MetaMask...');\n        const connectMetamask = await connect(wagmiObj);\n\n        if (connectMetamask.data) {\n          if (window.ethereum.chainId !== '0x13881') {\n            await checkNetwork();\n          }\n\n          setUserWallet(prevUserWallet => ({ ...prevUserWallet,\n            network: window.ethereum.chainId,\n            address: connectMetamask.data.account,\n            connected: true\n          }));\n          toast.success('Connected Account to Solid World Dapp.', {\n            duration: 3000\n          });\n          console.log('Connected Account to Mumbai Network: ', connectMetamask.data.account);\n        }\n\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setUserWallet(defaultUserWalletState);\n        console.log('Connecting MetaMask Error: ', error, connectDataError);\n        setIsLoading(false);\n        window.location.reload();\n        return;\n      }\n    } else {\n      setUserWallet(defaultUserWalletState);\n      toast.error('Disconnected Account.', {\n        duration: 3000\n      });\n      console.log('User wallet disconnect');\n      setIsLoading(false);\n      return;\n    }\n  }\n\n  async function checkNetwork() {\n    console.log('Connecting MetaMask to Mumbai Network...');\n    toast.loading('Please connect your Metamask to Mumbai Polygon Testnet to use Solid World Dapp');\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x13881'\n        }]\n      });\n      return;\n    } catch (switchError) {\n      if (isMobile || switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [mumbaiChainParameter]\n          });\n          return;\n        } catch (addError) {\n          console.log('Connecting Mumbai Network: ', addError.message);\n          throw addError;\n        }\n      }\n\n      console.log('Connecting Mumbai Netowrk: ', switchError.message);\n      throw switchError;\n    }\n  }\n\n  x``; // Connect to MetaMask Start //\n\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log('Need to install MetaMask');\n      setErrorMessage('Please install MetaMask browser extension to interact');\n    }\n  };\n\n  const accountChangedHandler = newAccount => {\n    setDefaultAccount(newAccount);\n  }; // Connect to MetaMask End //\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"light\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          children: \"SCT TESTE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Navbar.Text, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-dark\",\n            onClick: connectWalletHandler,\n            children: connButtonText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Token Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Token Symbol:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Decimals:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Total Suply:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"reRfNNwARQoRC/6H6J/ABSkvHPQ=\", true);\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbook/Documents/pre-dao/src/App.js"],"names":["Container","Navbar","Button","Form","ethers","React","useState","useEffect","token_abi","provider","providers","AlchemyProvider","defaultUserWalletState","address","network","connected","mumbaiChainParameter","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","App","isLoading","setIsLoading","userWallet","setUserWallet","data","connectData","loading","connectDataLoading","error","connectDataError","connect","useConnect","wagmiObj","connectors","map","obj","window","ethereum","on","accounts","console","log","undefined","prevUserWallet","location","reload","toast","handleWalletConnection","connectMetamask","checkNetwork","account","success","duration","request","method","params","switchError","isMobile","code","addError","message","x","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","connButtonText","setConnButtonText","connectWalletHandler","isMetaMask","then","result","accountChangedHandler","catch","newAccount"],"mappings":"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","sourcesContent":["import {Container, Navbar, Button, Form} from 'react-bootstrap'\nimport { ethers } from \"ethers\";\nimport React, {useState, useEffect} from 'react'\n\nimport token_abi from './contracts/sct_abi.json'\n\nconst provider = new ethers.providers.AlchemyProvider('maticmum', 'eytwgLayNf_PqhNiSwaOPzkb-fS9hss5');\n\nconst defaultUserWalletState = {\n  address: '0x0000000000000000000000000000000000000000',\n  network: null,\n  connected: false\n}\n\nconst mumbaiChainParameter = {\n  chainId: \"0x13881\",\n  chainName: \"Mumbai\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\n}\n\n\nfunction App() {\n\n  let [isLoading, setIsLoading] = React.useState(false);\n\n  let [userWallet, setUserWallet] = React.useState(defaultUserWalletState);\n\n  const [{\n    data: connectData,\n    loading: connectDataLoading,\n    error: connectDataError\n  }, connect] = useConnect();\n\n  let wagmiObj;\n  connectData.connectors.map(obj => { wagmiObj = obj });\n\n  React.useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        console.log(`Wallet changed: ${accounts[0]}`);\n        if (accounts[0] === undefined) {\n          setUserWallet(defaultUserWalletState);\n        }\n        else if (accounts[0] !== userWallet.address) {\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            address: accounts[0]\n          }));\n        }\n      })\n      window.ethereum.on('chainChanged', (chainId) => {\n        console.log(`Network changed: ${chainId}`);\n        if (chainId !== '0x13881') {\n          window.location.reload();\n        }\n      })\n    } else {\n      toast('Please install Metamask to use Solid World Dapp.');\n    }\n  }, []);\n\n  async function handleWalletConnection() {\n    setIsLoading(true);\n    if (!userWallet.connected) {\n      try {\n        console.log('Connecting MetaMask...');\n        const connectMetamask = await connect(wagmiObj);\n        if (connectMetamask.data) {\n          if (window.ethereum.chainId !== '0x13881') { \n            await checkNetwork();\n          }\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            network: window.ethereum.chainId,\n            address: connectMetamask.data.account,\n            connected: true\n          }));\n          toast.success('Connected Account to Solid World Dapp.', {duration: 3000});\n          console.log('Connected Account to Mumbai Network: ', connectMetamask.data.account);\n        }\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setUserWallet(defaultUserWalletState);\n        console.log('Connecting MetaMask Error: ', error, connectDataError);\n        setIsLoading(false);\n        window.location.reload();\n        return;\n      }\n    } else {\n      setUserWallet(defaultUserWalletState);\n      toast.error('Disconnected Account.', { duration: 3000 });\n      console.log('User wallet disconnect');\n      setIsLoading(false);\n      return;\n    }\n  }\n\n  async function checkNetwork() {\n    console.log('Connecting MetaMask to Mumbai Network...');\n    toast.loading('Please connect your Metamask to Mumbai Polygon Testnet to use Solid World Dapp');\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x13881' }],\n      });\n      return;\n    } catch (switchError) {\n      if (isMobile || switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              mumbaiChainParameter\n            ],\n          });\n          return;\n        } catch (addError) {\n          console.log('Connecting Mumbai Network: ', addError.message);\n          throw addError;\n        }\n      }\n      console.log('Connecting Mumbai Netowrk: ', switchError.message);\n      throw switchError;\n    }\n  }\nx``\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // Connect to MetaMask Start //\n  \n  const [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask) {\n\n            window.ethereum.request({ method: 'eth_requestAccounts'})\n            .then(result => {\n                accountChangedHandler(result[0]);\n                setConnButtonText('Wallet Connected');\n            })\n            .catch(error => {\n                setErrorMessage(error.message);\n            \n            });\n\n        } else {\n            console.log('Need to install MetaMask');\n            setErrorMessage('Please install MetaMask browser extension to interact');\n        }\n    }\n    const accountChangedHandler = (newAccount) => {\n      setDefaultAccount(newAccount);\n  }\n\n  // Connect to MetaMask End //\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\">\n        <Container>\n          <Navbar.Brand>SCT TESTE</Navbar.Brand>\n          <Navbar.Text><Button variant=\"outline-dark\" onClick={connectWalletHandler}>{connButtonText}</Button></Navbar.Text>\n        </Container>\n      </Navbar>\n      <div className=\"pt-5\">\n        <h4 className=\"py-5\">Token Name:</h4>\n        <h4 className=\"py-5\">Token Symbol:</h4>\n        <h4 className=\"py-5\">Decimals:</h4>\n        <h4 className=\"py-5\">Total Suply:</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}