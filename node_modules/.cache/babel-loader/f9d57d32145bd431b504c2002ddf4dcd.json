{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Documents/pre-dao/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Container, Navbar, Button, Form } from 'react-bootstrap';\nimport { ethers } from \"ethers\";\nimport React, { useState, useEffect } from 'react';\nimport token_abi from './contracts/sct_abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new ethers.providers.AlchemyProvider('maticmum', 'eytwgLayNf_PqhNiSwaOPzkb-fS9hss5');\n\nfunction App() {\n  _s();\n\n  // Connect to MetaMask Start //\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log('Need to install MetaMask');\n      setErrorMessage('Please install MetaMask browser extension to interact');\n    }\n  };\n\n  const accountChangedHandler = newAccount => {\n    setDefaultAccount(newAccount);\n  }; // Connect to MetaMask End //\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      bg: \"light\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          children: \"SCT TESTE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Navbar.Text, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-dark\",\n            onClick: connectWalletHandler,\n            children: connButtonText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Token Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Token Symbol:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Decimals:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"py-5\",\n        children: \"Total Suply:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bO/PxcW5aKHDKT1E1EVxOCdLuV4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbook/Documents/pre-dao/src/App.js"],"names":["Container","Navbar","Button","Form","ethers","React","useState","useEffect","token_abi","provider","providers","AlchemyProvider","App","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","connButtonText","setConnButtonText","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","error","message","console","log","newAccount"],"mappings":";;;AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,IAAnC,QAA8C,iBAA9C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,MAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,eAArB,CAAqC,UAArC,EAAiD,kCAAjD,CAAjB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAkCb;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;AACD,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACW,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,gBAAD,CAApD;;AAEG,QAAMa,oBAAoB,GAAG,MAAM;AAC/B,QAAIC,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACC,QAAP,CAAgBC,UAAvC,EAAmD;AAE/CF,MAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAxB,EACCC,IADD,CACMC,MAAM,IAAI;AACZC,QAAAA,qBAAqB,CAACD,MAAM,CAAC,CAAD,CAAP,CAArB;AACAR,QAAAA,iBAAiB,CAAC,kBAAD,CAAjB;AACH,OAJD,EAKCU,KALD,CAKOC,KAAK,IAAI;AACZf,QAAAA,eAAe,CAACe,KAAK,CAACC,OAAP,CAAf;AAEH,OARD;AAUH,KAZD,MAYO;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAlB,MAAAA,eAAe,CAAC,uDAAD,CAAf;AACH;AACJ,GAjBD;;AAkBA,QAAMa,qBAAqB,GAAIM,UAAD,IAAgB;AAC5CjB,IAAAA,iBAAiB,CAACiB,UAAD,CAAjB;AACH,GAFC,CA1DW,CA8Db;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,OAAX;AAAA,6BACE,QAAC,SAAD;AAAA,gCACE,QAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD,CAAQ,IAAR;AAAA,iCAAa,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,cAAhB;AAA+B,YAAA,OAAO,EAAEd,oBAAxC;AAAA,sBAA+DF;AAA/D;AAAA;AAAA;AAAA;AAAA;AAAb;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAhFQL,G;;KAAAA,G;AAkFT,eAAeA,GAAf","sourcesContent":["import {Container, Navbar, Button, Form} from 'react-bootstrap'\nimport { ethers } from \"ethers\";\nimport React, {useState, useEffect} from 'react'\n\nimport token_abi from './contracts/sct_abi.json'\n\nconst provider = new ethers.providers.AlchemyProvider('maticmum', 'eytwgLayNf_PqhNiSwaOPzkb-fS9hss5');\n\nfunction App() {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // Connect to MetaMask Start //\n  \n  const [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask) {\n\n            window.ethereum.request({ method: 'eth_requestAccounts'})\n            .then(result => {\n                accountChangedHandler(result[0]);\n                setConnButtonText('Wallet Connected');\n            })\n            .catch(error => {\n                setErrorMessage(error.message);\n            \n            });\n\n        } else {\n            console.log('Need to install MetaMask');\n            setErrorMessage('Please install MetaMask browser extension to interact');\n        }\n    }\n    const accountChangedHandler = (newAccount) => {\n      setDefaultAccount(newAccount);\n  }\n\n  // Connect to MetaMask End //\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"light\">\n        <Container>\n          <Navbar.Brand>SCT TESTE</Navbar.Brand>\n          <Navbar.Text><Button variant=\"outline-dark\" onClick={connectWalletHandler}>{connButtonText}</Button></Navbar.Text>\n        </Container>\n      </Navbar>\n      <div className=\"pt-5\">\n        <h4 className=\"py-5\">Token Name:</h4>\n        <h4 className=\"py-5\">Token Symbol:</h4>\n        <h4 className=\"py-5\">Decimals:</h4>\n        <h4 className=\"py-5\">Total Suply:</h4>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}