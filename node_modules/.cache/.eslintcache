[{"/Users/macbook/Documents/remix/src/index.js":"1","/Users/macbook/Documents/remix/src/pages/Home.js":"2","/Users/macbook/Documents/remix/src/pages/NFT.js":"3","/Users/macbook/Documents/remix/src/pages/CarbonCredit.js":"4","/Users/macbook/Documents/remix/src/pages/Solid.js":"5"},{"size":1098,"mtime":1649346024566,"results":"6","hashOfConfig":"7"},{"size":2849,"mtime":1649280788722,"results":"8","hashOfConfig":"7"},{"size":17312,"mtime":1649349068888,"results":"9","hashOfConfig":"7"},{"size":13108,"mtime":1649349037098,"results":"10","hashOfConfig":"7"},{"size":12474,"mtime":1649349085130,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12r5wzb",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/macbook/Documents/remix/src/index.js",["31"],[],"/Users/macbook/Documents/remix/src/pages/Home.js",["32"],[],"/Users/macbook/Documents/remix/src/pages/NFT.js",["33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60"],[],"import AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport React, {useState} from 'react';\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { isMobile } from \"react-device-detect\";\nimport { useConnect, useAccount } from 'wagmi';\nimport { ethers } from \"ethers\";\nimport nft_abi from '../contracts/nft_abi.json'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nconst defaultUserWalletState = {\n  address: '0x0000000000000000000000000000000000000000',\n  network: null,\n  connected: false\n}\n\nconst mumbaiChainParameter = {\n  chainId: \"0x13881\",\n  chainName: \"Mumbai\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\n}\n\nconst url = \"https://polygon-mumbai.g.alchemy.com/v2/8lsMkVFvQr7UoBJT30QWCQpt9VNodpF3\";\n\n\nfunction NFT() {\n\n  // Connect To MetaMask And Mumbai  Start //\n\n  const [{ data: accountData }, disconnect] = useAccount({\n    fetchEns: true,\n  })\n\n  let [isLoading, setIsLoading] = React.useState(false);\n\n  let [userWallet, setUserWallet] = React.useState(defaultUserWalletState);\n\n  let [buttonText, setButtonText] = React.useState('Connect Wallet')\n\n  const [{\n    data: connectData,\n    loading: connectDataLoading,\n    error: connectDataError\n  }, connect] = useConnect();\n\n  let wagmiObj;\n  connectData.connectors.map(obj => { wagmiObj = obj });\n\n  React.useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        console.log(`Wallet changed: ${accounts[0]}`);\n        if (accounts[0] === undefined) {\n          setUserWallet(defaultUserWalletState);\n        }\n        else if (accounts[0] !== userWallet.address) {\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            address: accounts[0]\n          }));\n        }\n      })\n      window.ethereum.on('chainChanged', (chainId) => {\n        console.log(`Network changed: ${chainId}`);\n        if (chainId !== '0x13881') {\n          window.location.reload();\n        }\n      })\n    } else {\n      toast('Please install Metamask to use Solid World Dapp.');\n    }\n  }, []);\n\n  async function handleWalletConnection() {\n    setIsLoading(true);\n    if (!userWallet.connected) {\n      try {\n        setButtonText(\"Wallet Connected\");\n        console.log('Connecting MetaMask...');\n        const connectMetamask = await connect(wagmiObj);\n        if (connectMetamask.data) {\n          if (window.ethereum.chainId !== '0x13881') { \n            await checkNetwork();\n          }\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            network: window.ethereum.chainId,\n            address: connectMetamask.data.account,\n            connected: true\n          }));\n          toast.success('Connected Account to Solid World Dapp.', {duration: 3000});\n          console.log('Connected Account to Mumbai Network: ', connectMetamask.data.account);\n        }\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setUserWallet(defaultUserWalletState);\n        console.log('Connecting MetaMask Error: ', error, connectDataError);\n        setIsLoading(false);\n        window.location.reload();\n        return;\n      }\n    } else {\n      setUserWallet(defaultUserWalletState);\n      toast.error('Disconnected Account.', { duration: 3000 });\n      console.log('User wallet disconnect');\n      setIsLoading(false);\n      return;\n    }\n  }\n\n  async function checkNetwork() {\n    console.log('Connecting MetaMask to Mumbai Network...');\n    toast.loading('Please connect your Metamask to Mumbai Polygon Testnet to use Solid World Dapp');\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x13881' }],\n      });\n      return;\n    } catch (switchError) {\n      if (isMobile || switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              mumbaiChainParameter\n            ],\n          });\n          return;\n        } catch (addError) {\n          console.log('Connecting Mumbai Network: ', addError.message);\n          throw addError;\n        }\n      }\n      console.log('Connecting Mumbai Netowrk: ', switchError.message);\n      throw switchError;\n    }\n  }\n    // Connect To MetaMask And Mumbai  End //\n\n    // Tabs Start //\n\n    function TabPanel(props) {\n      const { children, value, index, ...other } = props;\n    \n      return (\n        <div\n          role=\"tabpanel\"\n          hidden={value !== index}\n          id={`simple-tabpanel-${index}`}\n          aria-labelledby={`simple-tab-${index}`}\n          {...other}\n        >\n          {value === index && (\n            <Box sx={{ p: 3 }}>\n              <Typography>{children}</Typography>\n            </Box>\n          )}\n        </div>\n      );\n    }\n    \n    TabPanel.propTypes = {\n      children: PropTypes.node,\n      index: PropTypes.number.isRequired,\n      value: PropTypes.number.isRequired,\n    };\n    \n    function a11yProps(index) {\n      return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n      };\n    }\n\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n\n  // Tabs End //\n\n  // Contract Start //\n \n  async function Balance(e){\n    e.preventDefault()\n    try{\n      const balanceAddress = document.getElementById('balanceAddress').value;\n      const tempBalance = await contract.balanceOf(balanceAddress)\n      const tempParsed = tempBalance.toNumber()\n      alert(\"Balance: \" + tempParsed)\n    }  \n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getApproved(e){\n    e.preventDefault()\n    try{\n      const approvedId = parseInt(document.getElementById('getApprovedId').value);\n      console.log(approvedId)\n      const approved = await contract.getApproved(approvedId)\n      alert(\"Approved: \" + approved)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getApprovedAll(e){\n    e.preventDefault()\n    const approvedOwner = document.getElementById('approvedAllOwner').value\n    const approvedOperator = document.getElementById('approvedAllOperator').value\n    const approvedAll = await contract.isApprovedForAll(approvedOwner, approvedOperator)\n    alert(\"Is Approved For All: \" + approvedAll)\n  }\n  async function getName(e){\n    e.preventDefault()\n    try{\n      alert('Contract Name: ' + await contract.name())\n    }\n    catch(err){\n      alert('Error on retrive inform')\n    }\n  }\n  async function getOwner(e){\n    e.preventDefault()\n    try{\n      alert(\"Owner: \" + await contract.owner())\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getOwnerOf(e){\n    try{\n      e.preventDefault()\n      const ownerId = parseInt(document.getElementById('ownerOfTokenId').value);\n      const ownerOf = await contract.ownerOf(ownerId);\n      alert(\"Owner: \" + ownerOf)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getSymbol(e){\n    e.preventDefault()\n    try{\n      alert('Symbol: ' + await contract.symbol())\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getTokenURI(e){\n    e.preventDefault()\n    try{\n      const tokenUriId = parseInt(document.getElementById('tokenUriId').value);\n      const tokenUri = await contract.tokenURI(tokenUriId)\n      alert(\"Token URI: \" + tokenUri)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getApprove(e){\n    e.preventDefault()\n    try{\n      const approveTo = document.getElementById('approveTo').value;\n      const approveTokenId = parseInt(document.getElementById('approveTokenId').value);\n      const approve = await contract.approve(approveTo, approveTokenId)\n      alert('Approve: ' + approve)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getRenounce(e){\n    e.preventDefault()\n    try{\n      const renounce = await contract.renounceOwnership()\n      alert(\"Renounce: \" + renounce)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getStfFrom(e){\n    e.preventDefault()\n    try{\n      const stfFrom = document.getElementById('stfFrom').value;\n      const stfTo = document.getElementById('stfTo').value;\n      const stfTokenId = parseInt(document.getElementById('stfTokenId').value);\n      const stf = await contract.safeTransferFrom(stfFrom, stfTo, stfTokenId)\n      alert(\"Safe transfer from :\" + stf)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getSaf(e){\n    try{\n      const safOperator = document.getElementById('safOperator').value;\n      const safApproved = document.getElementById('safApproved').value;\n      const saf = await contract.setApprovalForAll(safOperator, safApproved)\n      alert('Safe Approval For All: ' + saf)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getSbmuri(e){\n      try{\n        const sbmuriData = document.getElementById('sbmuri').value;\n        const sbmuri = await contract.setBaseMetadataURI(sbmuriData)\n        alert('Safe Base MetaData URI: ' + sbmuri )\n      }\n      catch(err){\n        console.log(err)\n      }\n  }\n  async function getTransfer(e){\n    e.preventDefault();\n    try{\n      const transferFrom = document.getElementById('transferFrom').value;\n      const transferFromTo = document.getElementById('transferFromTo').value;\n      const transferFromTokenId = parseInt(document.getElementById('transferFromTokenId').value);\n      const transfer = await contract.transferFrom(transferFrom, transferFromTo, transferFromTokenId)\n      alert(\"Transfer From: \" + transfer)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getTransferownership(e){\n    e.preventDefault();\n    try{\n      const transferownership = document.getElementById('transferownership').value;\n      const transferOwner = await contract.transferOwnership(transferownership)\n      alert(\"Transfer Ownership: \" + transferOwner)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n\n\n  const contractAddress = '0x896e492558c1f2920e98a422e541a5056b7eCBFa'\n\n  const [signer, setSigner] = useState(null)\n  const [contract, setContract] = useState(null)\n\n  const updateContract = async () => {\n    try{\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n    await provider.send(\"eth_requestAccounts\", [])\n    const tempSigner = provider.getSigner()\n    setSigner(tempSigner)\n    const tempContract = new ethers.Contract(contractAddress, nft_abi, tempSigner)\n    console.log(await tempContract.name())\n    setContract(tempContract)\n    }catch(err){\n      alert('Error to connect Wallet, please try again later')\n    }\n  }\n  const connectWallet = () => {\n    handleWalletConnection()\n    updateContract()\n  }\n\n  return (\n    <>\n      <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}> <a href=\"/\"><ArrowBackIcon sx={{color: 'white'}}/></a> NFT </Typography>\n          <Button color=\"inherit\" onClick={connectWallet}> {buttonText} </Button>\n        </Toolbar>\n      </AppBar>\n    </Box>\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n          <Tab label=\"Read\" {...a11yProps(0)} />\n          <Tab label=\"Write\" {...a11yProps(1)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={1}>\n        <div>\n          <h3>Approve</h3>\n          <div>\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='approveTo' label=\"to\" variant=\"outlined\" />\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='approveTokenId' label=\"tokenId\" variant=\"outlined\" />\n          </div>\n          <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getApprove}> Call </Button>\n          </div>\n        </div>\n        <div>\n          <h3>Renounce Ownership</h3>\n          <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getRenounce} > Call </Button>\n          </div>\n        </div>\n        <div>\n          <h3>Safe Transfer From</h3>\n          <div>\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfFrom' label=\"from\" variant=\"outlined\" />\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfTo' label=\"to\" variant=\"outlined\" />\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfTokenId' label=\"tokenId\" variant=\"outlined\" />\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfData' label=\"_data\" variant=\"outlined\" />\n          </div>\n          <div>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getStfFrom}> Call </Button>\n          </div>\n        </div>\n        <div>\n          <h3>Set Approval For All</h3>\n          <div>\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='safOperator' label=\"to\" variant=\"outlined\" />\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='safApproved' label=\"tokenId\" variant=\"outlined\" />\n          </div>\n          <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getSaf}> Call </Button>\n          </div>\n        </div>\n        <div>\n          <h3>Set Base Metadata Uri</h3>\n          <div>\n            <TextField sx={{width: '100%'}} id=\"outlined-basic\" id='sbmuri' label=\"_newBaseMetadataURI\" variant=\"outlined\" />\n          </div>\n          <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getSbmuri}> Call </Button>\n          </div>\n        </div>\n        <div>\n          <h3>Transfer from</h3>\n          <div>\n            <TextField sx={{width: '50%'}} id=\"outlined-basic\" id='transferFrom' label=\"from\" variant=\"outlined\" />\n            <TextField sx={{width: '50%'}} id=\"outlined-basic\" id='transferFromTo' label=\"to\" variant=\"outlined\" />\n            <TextField sx={{width: '100%'}} id=\"outlined-basic\" id='transferFromTokenId' label=\"tokenId\" variant=\"outlined\" />\n          </div>\n          <div>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getTransfer} > Call </Button>\n          </div>\n        </div> \n        <div>\n          <h3>Transfer Ownership</h3>\n          <div>\n            <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='transferownership' label=\"To\"></TextField>\n          </div>\n          <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getTransferownership}> Call </Button>\n          </div>\n        </div> \n    </TabPanel>\n    <TabPanel value={value} index={0}>\n    <div>\n      <h3>Balance</h3>\n      <div>\n        <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='balanceAddress' label=\"address\" variant=\"outlined\" />\n      </div>\n      <div>\n        <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={Balance}> Call </Button>\n      </div>\n    </div>\n    <div>\n      <h3>Get Approved</h3>\n      <div>\n        <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='getApprovedId' label=\"tokenId\" variant=\"outlined\" />\n      </div>\n      <div>\n        <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getApproved}> Call </Button>\n      </div>\n    </div>\n    <h3>Is Approved for All</h3>\n    <div>\n      <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='approvedAllOwner' label=\"Owner\" variant=\"outlined\" />\n      <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='approvedAllOperator' label=\"Operator\" variant=\"outlined\" />\n    </div>\n    <div>\n      <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getApprovedAll}> Call </Button>\n    </div>\n    <div>\n      <h3>Name</h3>\n      <div>\n        <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getName}> Call </Button>\n      </div>\n    </div>\n    <div>\n      <h3>Owner</h3>\n      <div>\n        <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getOwner}> Call </Button>\n      </div>\n    </div>\n    <div>\n      <h3>Owner Of</h3>\n      <div>\n        <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='ownerOfTokenId' label=\"tokenId\" variant=\"outlined\" />\n      </div>\n      <div>\n        <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getOwnerOf}> Call </Button>\n      </div>\n    </div>\n  <div>\n    <h3>Symbol</h3>\n    <div>\n    <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getSymbol}> Call </Button>\n    </div>\n  </div>\n  <div>\n    <h3>TokenURI</h3>\n    <div>\n    <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='tokenUriId' label=\"_id\" variant=\"outlined\" />\n    </div>\n    <div>\n    <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getTokenURI}> Call </Button>\n    </div>\n  </div>\n    </TabPanel>\n    </Box>\n    </>\n  );\n}\n\nexport default NFT;",["61","62"],"/Users/macbook/Documents/remix/src/pages/CarbonCredit.js",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88"],[],"import AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport React, {useState} from 'react';\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { isMobile } from \"react-device-detect\";\nimport { useConnect, useAccount } from 'wagmi';\nimport { ethers } from \"ethers\";\nimport carbon_abi from '../contracts/carbon_abi.json'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nconst defaultUserWalletState = {\n  address: '0x0000000000000000000000000000000000000000',\n  network: null,\n  connected: false\n}\n\nconst mumbaiChainParameter = {\n  chainId: \"0x13881\",\n  chainName: \"Mumbai\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\n}\n\nconst url = \"https://polygon-mumbai.g.alchemy.com/v2/8lsMkVFvQr7UoBJT30QWCQpt9VNodpF3\";\n\nconst CarbonCredit = () => {\n// Connect To MetaMask And Mumbai  Start //\n\n  const [{ data: accountData }, disconnect] = useAccount({\n    fetchEns: true,\n  })\n\n  let [isLoading, setIsLoading] = React.useState(false);\n\n  let [userWallet, setUserWallet] = React.useState(defaultUserWalletState);\n\n  let [buttonText, setButtonText] = React.useState('Connect Wallet')\n\n  const [{\n    data: connectData,\n    loading: connectDataLoading,\n    error: connectDataError\n  }, connect] = useConnect();\n\n  let wagmiObj;\n  connectData.connectors.map(obj => { wagmiObj = obj });\n\n  React.useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        console.log(`Wallet changed: ${accounts[0]}`);\n        if (accounts[0] === undefined) {\n          setUserWallet(defaultUserWalletState);\n        }\n        else if (accounts[0] !== userWallet.address) {\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            address: accounts[0]\n          }));\n        }\n      })\n      window.ethereum.on('chainChanged', (chainId) => {\n        console.log(`Network changed: ${chainId}`);\n        if (chainId !== '0x13881') {\n          window.location.reload();\n        }\n      })\n    } else {\n      toast('Please install Metamask to use Solid World Dapp.');\n    }\n  }, []);\n\n  async function handleWalletConnection() {\n    setIsLoading(true);\n    if (!userWallet.connected) {\n      try {\n        setButtonText(\"Wallet Connected\");\n        console.log('Connecting MetaMask...');\n        const connectMetamask = await connect(wagmiObj);\n        if (connectMetamask.data) {\n          if (window.ethereum.chainId !== '0x13881') { \n            await checkNetwork();\n          }\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            network: window.ethereum.chainId,\n            address: connectMetamask.data.account,\n            connected: true\n          }));\n          toast.success('Connected Account to Solid World Dapp.', {duration: 3000});\n          console.log('Connected Account to Mumbai Network: ', connectMetamask.data.account);\n        }\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setUserWallet(defaultUserWalletState);\n        console.log('Connecting MetaMask Error: ', error, connectDataError);\n        setIsLoading(false);\n        window.location.reload();\n        return;\n      }\n    } else {\n      setUserWallet(defaultUserWalletState);\n      toast.error('Disconnected Account.', { duration: 3000 });\n      console.log('User wallet disconnect');\n      setIsLoading(false);\n      return;\n    }\n  }\n\n  async function checkNetwork() {\n    console.log('Connecting MetaMask to Mumbai Network...');\n    toast.loading('Please connect your Metamask to Mumbai Polygon Testnet to use Solid World Dapp');\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x13881' }],\n      });\n      return;\n    } catch (switchError) {\n      if (isMobile || switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              mumbaiChainParameter\n            ],\n          });\n          return;\n        } catch (addError) {\n          console.log('Connecting Mumbai Network: ', addError.message);\n          throw addError;\n        }\n      }\n      console.log('Connecting Mumbai Netowrk: ', switchError.message);\n      throw switchError;\n    }\n  }\n    // Connect To MetaMask And Mumbai  End //\n\n    // Tabs Start //\n\n    function TabPanel(props) {\n      const { children, value, index, ...other } = props;\n    \n      return (\n        <div\n          role=\"tabpanel\"\n          hidden={value !== index}\n          id={`simple-tabpanel-${index}`}\n          aria-labelledby={`simple-tab-${index}`}\n          {...other}\n        >\n          {value === index && (\n            <Box sx={{ p: 3 }}>\n              <Typography>{children}</Typography>\n            </Box>\n          )}\n        </div>\n      );\n    }\n    \n    TabPanel.propTypes = {\n      children: PropTypes.node,\n      index: PropTypes.number.isRequired,\n      value: PropTypes.number.isRequired,\n    };\n    \n    function a11yProps(index) {\n      return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n      };\n    }\n\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n\n  // Tabs End //\n\n\n  const contractAddress = '0x44D457992627355c407e185Dd5533E1581aA8E5A'\n\n  const [signer, setSigner] = useState(null)\n  const [contract, setContract] = useState(null)\n\n  const updateContract = async () => {\n    try{\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      await provider.send(\"eth_requestAccounts\", [])\n      const tempSigner = provider.getSigner()\n      setSigner(tempSigner)\n      const tempContract = new ethers.Contract(contractAddress, carbon_abi, tempSigner)\n      setContract(tempContract)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n\n  const connectWallet = () => {\n    handleWalletConnection()\n    updateContract()\n  }\n\n  async function getBalance(e) {\n    e.preventDefault()\n    try{\n      const balanceAddress = document.getElementById('balanceAddress').value;\n      const balanceId = parseInt(document.getElementById('balanceId').value);\n      const balance = await contract.balanceOf(balanceAddress, balanceId)\n      alert(\"Balance: \" + balance)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getBalanceB(e) {\n    e.preventDefault()\n    try{\n      const balanceBAddress = document.getElementById('balanceBaccount').value;\n      console.log(balanceBAddress)\n      const balanceBId = parseInt(document.getElementById('balanceBids').value);\n      console.log(balanceBId)\n      const balance = await contract.balanceOfBatch(balanceBAddress, balanceBId)\n      alert(\"Balance Of Batch: \" + balance)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getApproved(e){\n    e.preventDefault()\n    try{\n      const approvedAccount = document.getElementById('approvedAccount').value;\n      const approvedOperator = document.getElementById('approvedOperator').value;\n      const approved = await contract.isApprovedForAll(approvedAccount, approvedOperator)\n      alert(\"Is Approved For All: \" + approved)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getOwner(e){\n    e.preventDefault()\n    try{\n      alert(\"Owner: \" + await contract.owner())\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getBurn(e){\n    e.preventDefault()\n    try{\n      const burnAccount = document.getElementById('burnAccount').value;;\n      const burnId = parseInt(document.getElementById('burnId').value);\n      const burnAmount = parseInt(document.getElementById('burnAmount'));\n      const burn = await contract.burn(burnAccount, burnId, burnAmount)\n      alert(\"Burn: \" + burn)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getStf(e){\n    e.preventDefault()\n    try{\n      const stfFrom = document.getElementById('StfFrom').value\n      const stfTo = document.getElementById('StfTo').value\n      const stfId = parseInt(document.getElementById('stfIds')).value\n      const stfAmount = parseInt(document.getElementById('stfAmounts')).value\n      const stfData = document.getElementById('stfData').value\n      const stf = await contract.safeTransferFrom(stfFrom, stfTo, stfId, stfAmount, stfData)\n      alert(\"Safe transfer from: \" + stf)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n  async function getSaf(e){\n    e.preventDefault()\n    try{\n      const safOperator = document.getElementById('safOperator').value\n    const safApproved = document.getElementById('safApproved').value\n    const saf = await contract.setApprovalForAll(safOperator, safApproved)\n    alert(\"Safe Approval for All: \" + saf)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n\n    return (\n      <div>\n          <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}> <a href=\"/\"><ArrowBackIcon sx={{color: 'white'}}/></a> <a>Carbon Credit</a> </Typography>\n          <Button color=\"inherit\" onClick={connectWallet}> {buttonText} </Button>\n        </Toolbar>\n      </AppBar>\n    </Box>\n    <Box sx={{ width: '100%' }}>\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n          <Tab label=\"Read\" {...a11yProps(0)} />\n          <Tab label=\"Write\" {...a11yProps(1)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={0}>\n        <div>\n          <h3>Balance</h3>\n          <div>\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='balanceAddress' label=\"address\" variant=\"outlined\" />\n            <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='balanceId' label=\"uint256\" variant=\"outlined\" />\n          </div>\n          <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getBalance} > Call </Button>\n          </div>\n          <h3> Is Approved For All </h3> \n          <div>\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='approvedAccount' label=\"address\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='approvedOperator' label=\"address\" variant=\"outlined\" />\n          </div>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getApproved} > Call </Button>\n        </div>\n        <div>\n          <h3>Owner</h3>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getOwner} > Call </Button>\n        </div>\n        <div>\n          <h3>Uri</h3>\n          <div>\n          <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='uriUint' label=\"uin256\" variant=\"outlined\" />\n          </div>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}} > Call </Button>\n        </div>\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <h3>Burn</h3>\n        <div>\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='burnAccount' label=\"account\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='burnId' label=\"id\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='burnAmount' label=\"_amount\" variant=\"outlined\" />\n        </div>\n        <div>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getBurn}> Call </Button>\n        </div>\n        <h3>Safe Transfer From</h3>\n        <div>\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfFrom' label=\"from\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfTo' label=\"to\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfIds' label=\"ids\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='stfAmounts' label=\"amount\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='stfData' label=\"data\" variant=\"outlined\" />\n        </div>\n        <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getStf} > Call </Button>\n        <h3>Set Approval For All</h3>\n        <div>\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='safOperator' label=\"operator\" variant=\"outlined\" />\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='safApproved' label=\"approved\" variant=\"outlined\" />\n        </div>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getSaf}> Call </Button>\n      </TabPanel>\n      </Box>\n      </div>\n    )\n}\nexport default CarbonCredit","/Users/macbook/Documents/remix/src/pages/Solid.js",["89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],[],"import AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport React, {useState} from 'react';\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { isMobile } from \"react-device-detect\";\nimport { useConnect, useAccount } from 'wagmi';\nimport { ethers } from \"ethers\";\nimport solid_abi from '../contracts/solid_abi.json'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\n\nconst defaultUserWalletState = {\n  address: '0x0000000000000000000000000000000000000000',\n  network: null,\n  connected: false\n}\n\nconst mumbaiChainParameter = {\n  chainId: \"0x13881\",\n  chainName: \"Mumbai\",\n  nativeCurrency: {\n    name: \"MATIC\",\n    symbol: \"MATIC\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://rpc-mumbai.maticvigil.com\"],\n  blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\n}\n\nconst url = \"https://polygon-mumbai.g.alchemy.com/v2/8lsMkVFvQr7UoBJT30QWCQpt9VNodpF3\";\n\nconst Solid = () => {\n// Connect To MetaMask And Mumbai  Start //\n\n  const [{ data: accountData }, disconnect] = useAccount({\n    fetchEns: true,\n  })\n\n  let [isLoading, setIsLoading] = React.useState(false);\n\n  let [userWallet, setUserWallet] = React.useState(defaultUserWalletState);\n\n  let [buttonText, setButtonText] = React.useState('Connect Wallet')\n\n  const [{\n    data: connectData,\n    loading: connectDataLoading,\n    error: connectDataError\n  }, connect] = useConnect();\n\n  let wagmiObj;\n  connectData.connectors.map(obj => { wagmiObj = obj });\n\n  React.useEffect(() => {\n    if (typeof window.ethereum !== 'undefined') {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        console.log(`Wallet changed: ${accounts[0]}`);\n        if (accounts[0] === undefined) {\n          setUserWallet(defaultUserWalletState);\n        }\n        else if (accounts[0] !== userWallet.address) {\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            address: accounts[0]\n          }));\n        }\n      })\n      window.ethereum.on('chainChanged', (chainId) => {\n        console.log(`Network changed: ${chainId}`);\n        if (chainId !== '0x13881') {\n          window.location.reload();\n        }\n      })\n    } else {\n      toast('Please install Metamask to use Solid World Dapp.');\n    }\n  }, []);\n\n  async function handleWalletConnection() {\n    setIsLoading(true);\n    if (!userWallet.connected) {\n      try {\n        setButtonText(\"Wallet Connected\");\n        console.log('Connecting MetaMask...');\n        const connectMetamask = await connect(wagmiObj);\n        if (connectMetamask.data) {\n          if (window.ethereum.chainId !== '0x13881') { \n            await checkNetwork();\n          }\n          setUserWallet(prevUserWallet => ({\n            ...prevUserWallet,\n            network: window.ethereum.chainId,\n            address: connectMetamask.data.account,\n            connected: true\n          }));\n          toast.success('Connected Account to Solid World Dapp.', {duration: 3000});\n          console.log('Connected Account to Mumbai Network: ', connectMetamask.data.account);\n        }\n        setIsLoading(false);\n        return;\n      } catch (error) {\n        setUserWallet(defaultUserWalletState);\n        console.log('Connecting MetaMask Error: ', error, connectDataError);\n        setIsLoading(false);\n        window.location.reload();\n        return;\n      }\n    } else {\n      setUserWallet(defaultUserWalletState);\n      toast.error('Disconnected Account.', { duration: 3000 });\n      console.log('User wallet disconnect');\n      setIsLoading(false);\n      return;\n    }\n  }\n\n  async function checkNetwork() {\n    console.log('Connecting MetaMask to Mumbai Network...');\n    toast.loading('Please connect your Metamask to Mumbai Polygon Testnet to use Solid World Dapp');\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x13881' }],\n      });\n      return;\n    } catch (switchError) {\n      if (isMobile || switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              mumbaiChainParameter\n            ],\n          });\n          return;\n        } catch (addError) {\n          console.log('Connecting Mumbai Network: ', addError.message);\n          throw addError;\n        }\n      }\n      console.log('Connecting Mumbai Netowrk: ', switchError.message);\n      throw switchError;\n    }\n  }\n    // Connect To MetaMask And Mumbai  End //\n\n    // Tabs Start //\n\n    function TabPanel(props) {\n      const { children, value, index, ...other } = props;\n    \n      return (\n        <div\n          role=\"tabpanel\"\n          hidden={value !== index}\n          id={`simple-tabpanel-${index}`}\n          aria-labelledby={`simple-tab-${index}`}\n          {...other}\n        >\n          {value === index && (\n            <Box sx={{ p: 3 }}>\n              <Typography>{children}</Typography>\n            </Box>\n          )}\n        </div>\n      );\n    }\n    \n    TabPanel.propTypes = {\n      children: PropTypes.node,\n      index: PropTypes.number.isRequired,\n      value: PropTypes.number.isRequired,\n    };\n    \n    function a11yProps(index) {\n      return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n      };\n    }\n\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n      setValue(newValue);\n    };\n\n  // Tabs End //\n\n\n  const contractAddress = '0x726ff71b94FEAC008A82610fFCFc22470cf3BC75'\n\n  const [signer, setSigner] = useState(null)\n  const [contract, setContract] = useState(null)\n\n  const updateContract = async () => {\n    try{\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      await provider.send(\"eth_requestAccounts\", [])\n      const tempSigner = provider.getSigner()\n      setSigner(tempSigner)\n      const tempContract = new ethers.Contract(contractAddress, solid_abi, tempSigner)\n      setContract(tempContract)\n    }\n    catch(err){\n      console.log(err)\n    }\n  }\n\n  const connectWallet = () => {\n    handleWalletConnection()\n    updateContract()\n  }\n\n  async function getAccessControls(e){\n      e.preventDefault()\n      try{\n          alert('Access Controls: ' + await contract.accessControls())\n      }\n      catch(err){\n          console.log(err)\n      }\n  }\n  async function getCarbonContract(e){\n      e.preventDefault()\n      try{\n        alert('Carbon Credit Contracts: ' + await contract.carboncreditContract())\n      }\n      catch(err){\n          console.log(err)\n      }\n  }\n  async function getNftContract(e){\n      e.preventDefault()\n      try{\n          alert('Nft Contract: ' + await contract.nftContract())\n      }\n      catch(err){\n          console.log(err)\n      }\n  }\n  async function getOwner(e){\n      e.preventDefault()\n      try{\n          alert('Owner: ' + await contract.owner())\n      }\n      catch(err){\n          console.log(err)\n      }\n  }\n\n  return (\n    <div>\n        <Box sx={{ flexGrow: 1 }}>\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}> <a href=\"/\"><ArrowBackIcon sx={{color: 'white'}}/></a> Solid </Typography>\n        <Button color=\"inherit\" onClick={connectWallet}> {buttonText} </Button>\n      </Toolbar>\n    </AppBar>\n  </Box>\n  <Box sx={{ width: '100%' }}>\n    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n      <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\n        <Tab label=\"Read\" {...a11yProps(0)} />\n        <Tab label=\"Write\" {...a11yProps(1)} />\n      </Tabs>\n    </Box>\n    <TabPanel value={value} index={0}>\n    <div>\n        <h3>Access Controls</h3>\n        <div>\n        <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getAccessControls}> Call </Button>\n        </div>\n    </div>\n    <div>\n        <h3>Carbon Credit Contract</h3>\n        <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getCarbonContract}> Call </Button> \n        </div>\n    </div>\n    <div>\n        <h3>NFT Contract</h3>\n        <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getNftContract}> Call </Button>\n        </div>\n    </div>\n    <div>\n        <h3>Owner</h3>\n        <div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}} onClick={getOwner}> Call </Button>\n        </div>\n    </div>\n    </TabPanel>\n    <TabPanel value={value} index={1}>\n      <div>\n        <h3>Burn Carbon Credit</h3>\n           <div>\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='burnAddress' label=\"Buyer Address\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='burnId' label=\"Id\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='burnAmount' label=\"Amount\" variant=\"outlined\" />\n           </div>\n           <div>\n               <Button variant=\"contained\" sx={{width: '100%', mt: 2}}> Call </Button>\n           </div>\n      </div>\n      <div>\n          <h3>Mint Carbon Credit</h3>\n          <div>\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='mintAddress' label=\"Buyer Address\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='mintId' label=\"Id\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='mintAmount' label=\"Amount\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='mintData' label=\"Data\" variant=\"outlined\" />\n          </div>\n          <div>\n              <Button variant=\"contained\" sx={{width: '100%', mt: 2}}> Call </Button>\n          </div>\n      </div>\n      <div>\n          <h3>Set Base Metadata Uri</h3>\n          <div>\n          <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='sbmUri' label=\"New Base Metadata URI\" variant=\"outlined\" />\n          </div>\n          <div>\n              <Button variant=\"contained\" sx={{width: '100%', mt: 2}}> Call </Button>\n          </div>\n      </div>\n      <div>\n          <h3> Transfer Carbon Credit </h3>\n          <div>\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='tccSeller' label=\"Seller Address\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='tccBuyer' label=\"Buyer Address\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='tccId' label=\"Id\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='tccAmount' label=\"Amount\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='tccData' label=\"Data\" variant=\"outlined\" />\n          </div>\n          <div>\n              <Button variant=\"contained\" sx={{width: '100%', mt: 2}}> Call </Button>\n          </div>\n      </div>\n      <div>\n          <h3>Transfer NFT</h3>\n          <div>\n          <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='nftSeller' label=\"Seller Address\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='nftBuyer' label=\"Buyer Address\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='nftId' label=\"Id\" variant=\"outlined\" />\n           <TextField id=\"outlined-basic\" sx={{width: '50%'}} id='nftAmount' label=\"Data\" variant=\"outlined\" />\n          </div>\n          <div>\n              <Button variant=\"contained\" sx={{width: '100%', mt: 2}}> Call </Button>\n          </div>\n      </div>\n      <div>\n            <h3>Transfer Owner</h3>\n            <div>\n                <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='newOwner' label=\"New Owner\" variant=\"outlined\" />\n            </div>\n            <Button variant=\"contained\" sx={{width: '100%', mt: 2}}> Call </Button>\n      </div>\n      <div>\n          <h3>Update Access Control</h3>\n          <div>\n          <TextField id=\"outlined-basic\" sx={{width: '100%'}} id='updateAccess' label=\"Access Controls\" variant=\"outlined\" />\n          </div>\n          <Button variant=\"contained\" sx={{width: '100%', mt: 2}}> Call </Button>\n      </div>\n    </TabPanel>\n    </Box>\n    </div>\n  )\n}\nexport default Solid",{"ruleId":"117","severity":1,"message":"118","line":14,"column":9,"nodeType":"119","messageId":"120","endLine":14,"endColumn":15},{"ruleId":"117","severity":1,"message":"121","line":12,"column":7,"nodeType":"119","messageId":"120","endLine":12,"endColumn":11},{"ruleId":"117","severity":1,"message":"122","line":11,"column":17,"nodeType":"119","messageId":"120","endLine":11,"endColumn":24},{"ruleId":"117","severity":1,"message":"123","line":36,"column":7,"nodeType":"119","messageId":"120","endLine":36,"endColumn":10},{"ruleId":"117","severity":1,"message":"124","line":43,"column":18,"nodeType":"119","messageId":"120","endLine":43,"endColumn":29},{"ruleId":"117","severity":1,"message":"125","line":43,"column":33,"nodeType":"119","messageId":"120","endLine":43,"endColumn":43},{"ruleId":"117","severity":1,"message":"126","line":47,"column":8,"nodeType":"119","messageId":"120","endLine":47,"endColumn":17},{"ruleId":"117","severity":1,"message":"127","line":55,"column":14,"nodeType":"119","messageId":"120","endLine":55,"endColumn":32},{"ruleId":"128","severity":1,"message":"129","line":60,"column":34,"nodeType":"130","messageId":"131","endLine":60,"endColumn":36},{"ruleId":"132","severity":1,"message":"133","line":85,"column":6,"nodeType":"134","endLine":85,"endColumn":8,"suggestions":"135"},{"ruleId":"117","severity":1,"message":"136","line":364,"column":10,"nodeType":"119","messageId":"120","endLine":364,"endColumn":16},{"ruleId":"137","severity":1,"message":"138","line":406,"column":64,"nodeType":"139","messageId":"140","endLine":406,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":407,"column":64,"nodeType":"139","messageId":"140","endLine":407,"endColumn":83},{"ruleId":"137","severity":1,"message":"138","line":422,"column":64,"nodeType":"139","messageId":"140","endLine":422,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":423,"column":64,"nodeType":"139","messageId":"140","endLine":423,"endColumn":74},{"ruleId":"137","severity":1,"message":"138","line":424,"column":64,"nodeType":"139","messageId":"140","endLine":424,"endColumn":79},{"ruleId":"137","severity":1,"message":"138","line":425,"column":64,"nodeType":"139","messageId":"140","endLine":425,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":434,"column":64,"nodeType":"139","messageId":"140","endLine":434,"endColumn":80},{"ruleId":"137","severity":1,"message":"138","line":435,"column":64,"nodeType":"139","messageId":"140","endLine":435,"endColumn":80},{"ruleId":"137","severity":1,"message":"138","line":444,"column":65,"nodeType":"139","messageId":"140","endLine":444,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":453,"column":64,"nodeType":"139","messageId":"140","endLine":453,"endColumn":81},{"ruleId":"137","severity":1,"message":"138","line":454,"column":64,"nodeType":"139","messageId":"140","endLine":454,"endColumn":83},{"ruleId":"137","severity":1,"message":"138","line":455,"column":65,"nodeType":"139","messageId":"140","endLine":455,"endColumn":89},{"ruleId":"137","severity":1,"message":"138","line":464,"column":65,"nodeType":"139","messageId":"140","endLine":464,"endColumn":87},{"ruleId":"137","severity":1,"message":"138","line":475,"column":61,"nodeType":"139","messageId":"140","endLine":475,"endColumn":80},{"ruleId":"137","severity":1,"message":"138","line":484,"column":61,"nodeType":"139","messageId":"140","endLine":484,"endColumn":79},{"ruleId":"137","severity":1,"message":"138","line":492,"column":58,"nodeType":"139","messageId":"140","endLine":492,"endColumn":79},{"ruleId":"137","severity":1,"message":"138","line":493,"column":58,"nodeType":"139","messageId":"140","endLine":493,"endColumn":82},{"ruleId":"137","severity":1,"message":"138","line":513,"column":61,"nodeType":"139","messageId":"140","endLine":513,"endColumn":80},{"ruleId":"137","severity":1,"message":"138","line":528,"column":57,"nodeType":"139","messageId":"140","endLine":528,"endColumn":72},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"117","severity":1,"message":"122","line":11,"column":17,"nodeType":"119","messageId":"120","endLine":11,"endColumn":24},{"ruleId":"117","severity":1,"message":"123","line":36,"column":7,"nodeType":"119","messageId":"120","endLine":36,"endColumn":10},{"ruleId":"117","severity":1,"message":"124","line":41,"column":18,"nodeType":"119","messageId":"120","endLine":41,"endColumn":29},{"ruleId":"117","severity":1,"message":"125","line":41,"column":33,"nodeType":"119","messageId":"120","endLine":41,"endColumn":43},{"ruleId":"117","severity":1,"message":"126","line":45,"column":8,"nodeType":"119","messageId":"120","endLine":45,"endColumn":17},{"ruleId":"117","severity":1,"message":"127","line":53,"column":14,"nodeType":"119","messageId":"120","endLine":53,"endColumn":32},{"ruleId":"128","severity":1,"message":"129","line":58,"column":34,"nodeType":"130","messageId":"131","endLine":58,"endColumn":36},{"ruleId":"132","severity":1,"message":"133","line":83,"column":6,"nodeType":"134","endLine":83,"endColumn":8,"suggestions":"145"},{"ruleId":"117","severity":1,"message":"136","line":199,"column":10,"nodeType":"119","messageId":"120","endLine":199,"endColumn":16},{"ruleId":"117","severity":1,"message":"146","line":233,"column":18,"nodeType":"119","messageId":"120","endLine":233,"endColumn":29},{"ruleId":"147","severity":1,"message":"148","line":314,"column":129,"nodeType":"149","endLine":314,"endColumn":132},{"ruleId":"137","severity":1,"message":"138","line":330,"column":64,"nodeType":"139","messageId":"140","endLine":330,"endColumn":83},{"ruleId":"137","severity":1,"message":"138","line":331,"column":64,"nodeType":"139","messageId":"140","endLine":331,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":338,"column":62,"nodeType":"139","messageId":"140","endLine":338,"endColumn":82},{"ruleId":"137","severity":1,"message":"138","line":339,"column":62,"nodeType":"139","messageId":"140","endLine":339,"endColumn":83},{"ruleId":"137","severity":1,"message":"138","line":350,"column":63,"nodeType":"139","messageId":"140","endLine":350,"endColumn":75},{"ruleId":"137","severity":1,"message":"138","line":358,"column":62,"nodeType":"139","messageId":"140","endLine":358,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":359,"column":62,"nodeType":"139","messageId":"140","endLine":359,"endColumn":73},{"ruleId":"137","severity":1,"message":"138","line":360,"column":63,"nodeType":"139","messageId":"140","endLine":360,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":367,"column":62,"nodeType":"139","messageId":"140","endLine":367,"endColumn":74},{"ruleId":"137","severity":1,"message":"138","line":368,"column":62,"nodeType":"139","messageId":"140","endLine":368,"endColumn":72},{"ruleId":"137","severity":1,"message":"138","line":369,"column":62,"nodeType":"139","messageId":"140","endLine":369,"endColumn":73},{"ruleId":"137","severity":1,"message":"138","line":370,"column":62,"nodeType":"139","messageId":"140","endLine":370,"endColumn":77},{"ruleId":"137","severity":1,"message":"138","line":371,"column":63,"nodeType":"139","messageId":"140","endLine":371,"endColumn":75},{"ruleId":"137","severity":1,"message":"138","line":376,"column":62,"nodeType":"139","messageId":"140","endLine":376,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":377,"column":62,"nodeType":"139","messageId":"140","endLine":377,"endColumn":78},{"ruleId":"117","severity":1,"message":"122","line":11,"column":17,"nodeType":"119","messageId":"120","endLine":11,"endColumn":24},{"ruleId":"117","severity":1,"message":"123","line":36,"column":7,"nodeType":"119","messageId":"120","endLine":36,"endColumn":10},{"ruleId":"117","severity":1,"message":"124","line":41,"column":18,"nodeType":"119","messageId":"120","endLine":41,"endColumn":29},{"ruleId":"117","severity":1,"message":"125","line":41,"column":33,"nodeType":"119","messageId":"120","endLine":41,"endColumn":43},{"ruleId":"117","severity":1,"message":"126","line":45,"column":8,"nodeType":"119","messageId":"120","endLine":45,"endColumn":17},{"ruleId":"117","severity":1,"message":"127","line":53,"column":14,"nodeType":"119","messageId":"120","endLine":53,"endColumn":32},{"ruleId":"128","severity":1,"message":"129","line":58,"column":34,"nodeType":"130","messageId":"131","endLine":58,"endColumn":36},{"ruleId":"132","severity":1,"message":"133","line":83,"column":6,"nodeType":"134","endLine":83,"endColumn":8,"suggestions":"150"},{"ruleId":"117","severity":1,"message":"136","line":199,"column":10,"nodeType":"119","messageId":"120","endLine":199,"endColumn":16},{"ruleId":"137","severity":1,"message":"138","line":305,"column":63,"nodeType":"139","messageId":"140","endLine":305,"endColumn":79},{"ruleId":"137","severity":1,"message":"138","line":306,"column":63,"nodeType":"139","messageId":"140","endLine":306,"endColumn":74},{"ruleId":"137","severity":1,"message":"138","line":307,"column":64,"nodeType":"139","messageId":"140","endLine":307,"endColumn":79},{"ruleId":"137","severity":1,"message":"138","line":316,"column":62,"nodeType":"139","messageId":"140","endLine":316,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":317,"column":63,"nodeType":"139","messageId":"140","endLine":317,"endColumn":74},{"ruleId":"137","severity":1,"message":"138","line":318,"column":63,"nodeType":"139","messageId":"140","endLine":318,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":319,"column":63,"nodeType":"139","messageId":"140","endLine":319,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":328,"column":63,"nodeType":"139","messageId":"140","endLine":328,"endColumn":74},{"ruleId":"137","severity":1,"message":"138","line":337,"column":62,"nodeType":"139","messageId":"140","endLine":337,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":338,"column":63,"nodeType":"139","messageId":"140","endLine":338,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":339,"column":63,"nodeType":"139","messageId":"140","endLine":339,"endColumn":73},{"ruleId":"137","severity":1,"message":"138","line":340,"column":63,"nodeType":"139","messageId":"140","endLine":340,"endColumn":77},{"ruleId":"137","severity":1,"message":"138","line":341,"column":64,"nodeType":"139","messageId":"140","endLine":341,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":350,"column":62,"nodeType":"139","messageId":"140","endLine":350,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":351,"column":63,"nodeType":"139","messageId":"140","endLine":351,"endColumn":76},{"ruleId":"137","severity":1,"message":"138","line":352,"column":63,"nodeType":"139","messageId":"140","endLine":352,"endColumn":73},{"ruleId":"137","severity":1,"message":"138","line":353,"column":63,"nodeType":"139","messageId":"140","endLine":353,"endColumn":77},{"ruleId":"137","severity":1,"message":"138","line":362,"column":69,"nodeType":"139","messageId":"140","endLine":362,"endColumn":82},{"ruleId":"137","severity":1,"message":"138","line":369,"column":63,"nodeType":"139","messageId":"140","endLine":369,"endColumn":80},"no-unused-vars","'rpcUrl' is assigned a value but never used.","Identifier","unusedVar","'bull' is assigned a value but never used.","'Toaster' is defined but never used.","'url' is assigned a value but never used.","'accountData' is assigned a value but never used.","'disconnect' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'connectDataLoading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'userWallet.address'. Either include it or remove the dependency array.","ArrayExpression",["151"],"'signer' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-native-reassign",["152"],"no-negated-in-lhs",["153"],["154"],"'getBalanceB' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["155"],{"desc":"156","fix":"157"},"no-global-assign","no-unsafe-negation",{"desc":"156","fix":"158"},{"desc":"156","fix":"159"},"Update the dependencies array to be: [userWallet.address]",{"range":"160","text":"161"},{"range":"162","text":"161"},{"range":"163","text":"161"},[2528,2530],"[userWallet.address]",[2542,2544],[2533,2535]]